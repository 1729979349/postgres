<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
	<!-- <properties resource="jdbc.properties" url="/User/croky/generatorConfig.properties"> 
		<classPathEntry location="/Users/croky/.m2/repository/mysql/mysql-connector-java/5.1.40/mysql-connector-java-5.1.40.jar"/> 
		</properties> -->
	<!-- <classPathEntry location="/Users/croky/.m2/repository/mysql/mysql-connector-java/8.0.18/mysql-connector-java-8.0.18.jar"/> -->
	<classPathEntry
		location="D:/entrepot/maven/org/postgresql/postgresql/42.3.3/postgresql-42.3.3.jar" />
	<!-- defaultModelType=conditional,flat, hierarchical -->
	<!-- 1: conditional：类似hierarchical； 2: flat：所有内容（主键，blob）等全部生成在一个对象中； 3: 
		hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class) -->
	<!-- targetRuntime=MyBatis3,MyBatis3Simple,Ibatis2Java2或**Ibatis2Java5** -->
	<!-- MyBatis3会产生Example相关代码 -->
	<context id="postgres" targetRuntime="MyBatis3"
		defaultModelType="flat">
		<property name="autoDelimitKeywords" value="false" />
		<property name="javaFileEncoding" value="utf-8" />
		<!-- 格式化java代码 -->
		<property name="javaFormatter"
			value="org.mybatis.generator.api.dom.DefaultJavaFormatter" />
		<!-- 格式化XML代码 -->
		<property name="xmlFormatter"
			value="org.mybatis.generator.api.dom.DefaultXmlFormatter" />
		<property name="beginningDelimiter" value="'" />
		<property name="endingDelimiter" value="'" />

		<plugin type="org.mybatis.generator.plugins.FileCommentsPlugin">
			<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
			<property name="author" value="Croky.Zheng" />
		</plugin>

		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

		<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />

		<plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
		<!-- <plugin type="org.mybatis.generator.plugins.ToJsonPlugin" /> -->

		<plugin type="org.mybatis.generator.plugins.dsql.DisableDeletePlugin" />

		<plugin type="org.mybatis.generator.plugins.MapperAnnotationPlugin" />

		<plugin type="org.mybatis.generator.plugins.GenerateDAOFilePlugin">
			<property name="targetPackage"
				value="com.croky.postgres.dal.dao" />
			<property name="targetProject" value="src/main/java" />
			<!-- 只有为true时才能生成dao -->
			<property name="overwrite" value="true" />
		</plugin>

		<plugin type="org.mybatis.generator.plugins.GenerateClientModelFormFilePlugin">
			<property name="targetPackage"
					  value="com.croky.postgres.client.model" />
			<property name="targetProject" value="../postgres-client/src/main/java" />
			<property name="tagImportType" value="io.swagger.v3.oas.annotations.media.Schema" />
			<property name="tagTitle" value="title" />
			<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
			<!-- 只有为true时才能生成dao -->
			<property name="overwrite" value="true" />
		</plugin>

		<plugin type="org.mybatis.generator.plugins.GenerateClientModelVOFilePlugin">
			<property name="targetPackage"
					  value="com.croky.postgres.client.model" />
			<property name="targetProject" value="../postgres-client/src/main/java" />
			<property name="tagImportType" value="io.swagger.v3.oas.annotations.media.Schema" />
			<property name="tagTitle" value="title" />
			<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
			<!-- 只有为true时才能生成dao -->
			<property name="overwrite" value="true" />
		</plugin>

		<commentGenerator>
			<property name="suppressAllComments" value="false" />
			<property name="suppressDate" value="false" />
			<property name="addRemarkComments" value="false" />
			<property name="dateFormat" value="yyyy-MM-dd HH:mm:ss" />
			<property name="author" value="Croky.Zheng" />
		</commentGenerator>
		<!-- com.mysql.jdbc.Driver -->
<!--		<jdbcConnection driverClass="org.postgresql.Driver"-->
<!--			connectionURL="jdbc:postgresql://113.197.36.82:6660/backenddb?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMasterDownConnections=true&amp;nullCatalogMeansCurrent=true"-->
<!--			userId="backenddb" password="Aly123456!" />-->
		<jdbcConnection driverClass="org.postgresql.Driver"
						connectionURL="jdbc:postgresql://127.0.0.1:5432/backenddb?useSSL=false&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;autoReconnect=true&amp;allowMasterDownConnections=true&amp;nullCatalogMeansCurrent=true"
						userId="postgres" password="123456" />
		<!-- java类型处理器 用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl； 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和 
			NUMERIC数据类型； -->
		<javaTypeResolver>
			<!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型 false：默认, scale>0;length>18：使用BigDecimal; 
				scale=0;length[10,18]：使用Long； scale=0;length[5,9]：使用Integer； scale=0;length<5：使用Short； -->
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>
		<!-- java模型创建器，是必须要的元素 负责：1，key类（见context的defaultModelType）；2，java类；3，查询类 
			targetPackage：生成的类要放的包，真实的包受enableSubPackages属性控制； targetProject：目标项目，指定一个存在的目录下，生成的内容会放到指定目录中，如果目录不存在，MBG不会自动建目录 -->
		<javaModelGenerator
			targetPackage="com.croky.postgres.dal.model"
			targetProject="src/main/java">
			<!-- for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter； -->
			<property name="constructorBased" value="false" />
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />
			<!-- for MyBatis3 / MyBatis3Simple 是否创建一个不可变的类，如果为true， 那么MBG会创建一个没有setter方法的类，取而代之的是类似constructorBased的类 -->
			<property name="immutable" value="false" />

			<!-- 设置一个根对象， 如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项 
				注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括： 1，属性名相同，类型相同，有相同的getter/setter方法； -->
			<!-- <property name="rootClass" value="com.croky.postgres.dal.model.Model" 
				/> -->

			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>

		<!-- 生成SQL map的XML文件生成器， 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口）， 
			或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 
			targetPackage/targetProject:同javaModelGenerator -->
		<sqlMapGenerator
			targetPackage="com.croky.postgres.dal.mapper"
			targetProject="src/main/resources">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />
		</sqlMapGenerator>
		<!-- 对于mybatis来说，即生成Mapper接口，注意，如果没有配置该元素，那么默认不会生成Mapper接口 targetPackage/targetProject:同javaModelGenerator 
			type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）： 1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML； 
			2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中； 3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML； 
			注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER -->
		<javaClientGenerator type="ANNOTATEDMAPPER"
			targetPackage="com.croky.postgres.dal.mapper"
			targetProject="src/main/java">
			<!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
			<property name="enableSubPackages" value="true" />
		</javaClientGenerator>
		<!-- <table schema="qlm" tableName="tb_qlm_admin" domainObjectName="Admin" 
			enableCountByExample="false" enableDeleteByExample="false" enableSelectByExample="false" 
			enableUpdateByExample="false"> <columnRenamingRule searchString="^C" replaceString=""/> 
			</table> -->
		<table tableName="nailing_crowd%">
			<!-- 参考 javaModelGenerator 的 constructorBased属性 -->
			<property name="constructorBased" value="false" />

			<!-- 默认为false,如果设置为true,在生成的SQL中,table名字不会加上catalog或schema; -->
			<property name="ignoreQualifiersAtRuntime" value="false" />

			<!-- 参考 javaModelGenerator 的 immutable 属性 -->
			<property name="immutable" value="false" />

			<!-- 指定是否只生成domain类,如果设置为true,只生成domain类,如果还配置了sqlMapGenerator,那么在mapper 
				XML文件中，只生成resultMap元素 -->
			<property name="modelOnly" value="false" />


			<!-- 注意,该属性只针对MyBatis3Simple有用; 如果选择的runtime是MyBatis3Simple,那么会生成一个SelectAll方法,如果指定了selectAllOrderByClause,那么会在该SQL中添加指定的这个order条件; 
				<property name="selectAllOrderByClause" value="age desc,username asc"/> -->

			<!-- 如果设置为true,生成的model类会直接使用column本身的名字,而不会再使用驼峰命名方法,比如BORN_DATE,生成的属性名字就是BORN_DATE,而不会是bornDate -->
			<property name="useActualColumnNames" value="false" />
			<!-- column=主键列名,sql=Cloudscape | DB2 | DB2_MF | Derby | HSQLDB | Informix 
				| MySql | SqlServer | SYBASE | JDBC -->
			<generatedKey identity="true" column="id"
				sqlStatement="Mysql" />
			<!-- 查找列名中的字符串,使用规则替换,与domainObjectRenamingRule不能共存，如果使用了columnOverride元素,该属性无效 -->
			<!-- 
			<columnRenamingRule searchString="^ucs_" replaceString=""/> -->
			<domainObjectRenamingRule searchString="^Acl" replaceString=""/>
			
			<!-- 讲表中列名生成指定的java字段名 -->
			<columnOverride column="gmt_create" javaType="java.util.Date" property="createDateTime" jdbcType="TIMESTAMP" />
			<columnOverride column="gmt_modify" javaType="java.util.Date" property="lastModifyDateTime" jdbcType="TIMESTAMP" />
			<!-- 忽略某列,可以有多个ignoreColumn元素 -->
			<ignoreColumn column="croky_unknow_nothing" delimitedColumnName=""/>

		</table>
	</context>
</generatorConfiguration>